{
  "address": "0xeDb1C9bA41826f6F750d299d3eB20F0d41fD39eC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "launchTime_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeToRelease_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shareAPR",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shareAPRBase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumStake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShareBase",
          "type": "uint256"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenLinked",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceInPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumStakeRequired",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RewardReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareAPR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseAPR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBlocks",
          "type": "uint256"
        }
      ],
      "name": "_calcReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shareAPR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareAPRBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cap_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalShareBase",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceInPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumStakeRequired",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenLinked",
          "type": "address"
        }
      ],
      "name": "addTokenReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPoolByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPoolDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_shareAPR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareAPRBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cap_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalShareBase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "poolAddreses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "currentUserPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        }
      ],
      "name": "redeemAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "redeemBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        }
      ],
      "name": "releaseNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceInPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumStakeRequired",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenLinked",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "stakeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "unStakeEarly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "unStakeEarlyBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "unstakeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "userPoolDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "userPoolReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1cd6ba8c5b3a685ca8e9c9b4ac6d54e447eb73ec8b97b990d34157c4d6527c15",
  "receipt": {
    "to": null,
    "from": "0xe092b1fa25DF5786D151246E492Eed3d15EA4dAA",
    "contractAddress": "0xeDb1C9bA41826f6F750d299d3eB20F0d41fD39eC",
    "transactionIndex": 11,
    "gasUsed": "3963248",
    "logsBloom": "0x
    "blockHash": "0xaf7db821193391774c67e052bf6c73918365da4184950de8cd673e962ad2d2aa",
    "transactionHash": "0x1cd6ba8c5b3a685ca8e9c9b4ac6d54e447eb73ec8b97b990d34157c4d6527c15",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 11616912,
        "transactionHash": "0x1cd6ba8c5b3a685ca8e9c9b4ac6d54e447eb73ec8b97b990d34157c4d6527c15",
        "address": "0xeDb1C9bA41826f6F750d299d3eB20F0d41fD39eC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e092b1fa25df5786d151246e492eed3d15ea4daa"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0xaf7db821193391774c67e052bf6c73918365da4184950de8cd673e962ad2d2aa"
      }
    ],
    "blockNumber": 11616912,
    "cumulativeGasUsed": "5049958",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1639841512,
    1642433512,
    1646753512
  ],
  "solcInputHash": "80967d8eef9d98d7f7d253c24f00a32d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToRelease_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAPR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAPRBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShareBase\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenLinked\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumStakeRequired\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBlocks\",\"type\":\"uint256\"}],\"name\":\"_calcReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareAPRBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalShareBase\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStakeRequired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenLinked\",\"type\":\"address\"}],\"name\":\"addTokenReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPoolByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPoolDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareAPRBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalShareBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddreses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentUserPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"redeemAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"redeemBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"releaseNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"rewardTokenDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStakeRequired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenLinked\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"stakeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unStakeEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"unStakeEarlyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"unstakeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"userPoolDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"userPoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"only owner can call it\",\"params\":{\"_minimumStake\":\"minimum amount user should stake in order to participatin in this pool\",\"_shareAPR\":\"perenage numerator of the pool APR generated\",\"_shareAPRBase\":\"perenage denominator of the pool APR generated\",\"_token\":\"erc20 token address\",\"_totalShare\":\"perenage numerator of pool share of the farm overall points\",\"_totalShareBase\":\"perenage denominator of pool share of the farm overall points\",\"cap_\":\"the maxmum amount of token to be staked in this pool\"}},\"addTokenReward(uint256,uint256,uint256,address,address,address)\":{\"details\":\"only owner can call itnft point increase the RSFTI cap\",\"params\":{\"_minimumStakeRequired\":\"optional, for projects the would enforce user to stake their token in order to calim their rewards\",\"_nftAddress\":\"nft contract address\",\"_priceInPoint\":\"how many point required to calim it\",\"_tokenId\":\"nft token id\",\"_tokenLinked\":\"optinal , pool token address, only if `_minimumStakeRequired` is used to check if the staker is participating in the pool\",\"owner_\":\"the owner of this nft , this is used as well to return the nft back if no one calim it with no points left in the farm\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"claim(uint256)\":{\"params\":{\"key\":\"nft id\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getUserPools(address)\":{\"params\":{\"user\":\"user address\"},\"returns\":{\"currentUserPools\":\"user's pool addresses\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(address)\":{\"params\":{\"_token\":\"pool token address\"}},\"redeemAndClaim(address[],uint256)\":{\"params\":{\"_tokens\":\"array of pool tokens address\",\"key\":\"nft id\"}},\"redeemBatch(address[])\":{\"params\":{\"_tokens\":\"array of pool tokens address\"}},\"releaseNFT(uint256)\":{\"details\":\"only  owner can call itcalled only after the `_timeToRelease`\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(address,uint256)\":{\"details\":\"ony before launch time\",\"params\":{\"_amount\":\"user stakes to be added to this pool\",\"_token\":\"pool token address\"}},\"stakeBatch(address[],uint256[])\":{\"details\":\"ony before launch time,both function arguments length must be identical\",\"params\":{\"_amounts\":\"array of values to be staked for each pool\",\"_tokens\":\"array of pool tokens address\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unStakeEarly(address)\":{\"params\":{\"_token\":\"pool token address\"}},\"unStakeEarlyBatch(address[])\":{\"details\":\"only before launchtimeonly staker can call it\",\"params\":{\"_tokens\":\"array of pool tokens address\"}},\"unstake(address)\":{\"params\":{\"_token\":\"pool token address\"}},\"unstakeBatch(address[])\":{\"params\":{\"_tokens\":\"array of pool tokens address\"}},\"userPoolDetails(address,address)\":{\"returns\":{\"amount\":\"user stakes in this pool\",\"lastRewardBlock\":\"last redeeming time\",\"stakeTime\":\" time of staking\"}},\"userPoolReward(address,address)\":{\"params\":{\"_token\":\"pool token address\",\"_user\":\"user address\"},\"returns\":{\"_totalRewards\":\"number of rewards\"}},\"userRewards(address)\":{\"params\":{\"user\":\"user address\"},\"returns\":{\"_totalRewards\":\"number of rewards\"}}},\"title\":\"Startfi farm contract where users stake their tokens and get NFT as rewards\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPool(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"create new pool\"},\"addTokenReward(uint256,uint256,uint256,address,address,address)\":{\"notice\":\"add the nft rewards that users will claim\"},\"releaseNFT(uint256)\":{\"notice\":\"to protect nfts from being locked in the contract , owner can call it after the time to release and return it back to the original owner as long as minted point is less than the reward `_priceInPoint`\"},\"stake(address,uint256)\":{\"notice\":\"let user to stake tokens in a certain pool\"},\"stakeBatch(address[],uint256[])\":{\"notice\":\"let user to stake in maltible pools in a single transaction\"},\"unStakeEarlyBatch(address[])\":{\"notice\":\"before the farm starts, Let user unstake token from many pools at once\"},\"userPoolReward(address,address)\":{\"notice\":\"calculate user rewards at the call time ( between launchtime to deadline) in a certain pool\"},\"userRewards(address)\":{\"notice\":\"calculate user rewards at the call time ( between launchtime to deadline) in all user pools\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartfiFarm.sol\":\"StartfiFarm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/FarmPools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport './FarmTokens.sol';\\nimport './lib/SafeDecimalMath.sol';\\n\\ncontract FarmPools is FarmTokens {\\n    using SafeDecimalMath for uint256;\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    uint256 internal immutable _timeToRelease;\\n    uint256 internal immutable _farmDeadline;\\n    uint256 internal immutable _launchTime;\\n    uint256 private _RstfiMaxSupply;\\n    uint256 private totalShares;\\n\\n    struct poolDetails {\\n        uint256 shareAPR;\\n        uint256 shareAPRBase;\\n        uint256 minimumStake;\\n        // how many token this pool can hold\\n        uint256 cap;\\n        // how many token supplied to this pool\\n        uint256 totalSupply;\\n        //pool total share  of RSTFI in the whole farm\\n        uint256 totalShare;\\n        uint256 totalShareBase;\\n    }\\n    EnumerableSet.AddressSet private _poolsSet;\\n    mapping(address => poolDetails) internal _pools;\\n    event PoolAdded(\\n        address token,\\n        uint256 shareAPR,\\n        uint256 shareAPRBase,\\n        uint256 minimumStake,\\n        uint256 cap,\\n        uint256 totalShare,\\n        uint256 totalShareBase\\n    );\\n    // modifiers\\n\\n    modifier canStake(\\n        address _user,\\n        address _token,\\n        uint256 _amount\\n    ) {\\n        require(block.timestamp < _launchTime, 'Staking is locked');\\n        require(_poolsSet.contains(_token), 'non existe pool');\\n        require(_amount >= _pools[_token].minimumStake, 'less than the minimum amount');\\n        require(IERC20(_token).allowance(_user, address(this)) >= _amount, 'not allowed');\\n\\n        _;\\n    }\\n    modifier canUnStakeEarly() {\\n        require(_launchTime > block.timestamp, 'Staking is locked');\\n        _;\\n    }\\n    modifier canUnstake() {\\n        require(block.timestamp > _farmDeadline, 'Staking is locked');\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 launchTime_,\\n        uint256 deadline_,\\n        uint256 timeToRelease_\\n    ) {\\n        require(deadline_ > launchTime_, 'Launch time should be less then deadline');\\n        require(timeToRelease_ > deadline_, 'deadline should be less then release time');\\n        _farmDeadline = deadline_;\\n        _launchTime = launchTime_;\\n        _timeToRelease = timeToRelease_;\\n    }\\n\\n    function farmDeadline() external view returns (uint256) {\\n        return _farmDeadline;\\n    }\\n\\n    function launchTime() external view returns (uint256) {\\n        return _launchTime;\\n    }\\n\\n    /// @notice Only Owner can call it\\n\\n    function _addPool(\\n        address _token,\\n        uint256 _shareAPR,\\n        uint256 _shareAPRBase,\\n        uint256 _minimumStake,\\n        uint256 cap_,\\n        uint256 _totalShare,\\n        uint256 _totalShareBase\\n    ) internal onlyOwner {\\n        totalShares = totalShares + (_totalShare.divideDecimal(_totalShareBase));\\n        // every toen should have a share of the total rstfi and the math for APR and amount token staked should match that share so that the APR doesn't exceed it\\n        require(totalShares / 1 ether <= 100, 'exceed cap');\\n        require(\\n            _shareAPR != 0 &&\\n                _shareAPRBase != 0 &&\\n                _minimumStake != 0 &&\\n                cap_ != 0 &&\\n                _totalShare != 0 &&\\n                _totalShareBase != 0 &&\\n                _token != address(0),\\n            'Zero values not allowed'\\n        );\\n        require(!_poolsSet.contains(_token), 'Duplicated value is not allowed');\\n        _poolsSet.add(_token);\\n        _pools[_token] = poolDetails(_shareAPR, _shareAPRBase, _minimumStake, cap_, 0, _totalShare, _totalShareBase);\\n        emit PoolAdded(_token, _shareAPR, _shareAPRBase, _minimumStake, cap_, _totalShare, _totalShareBase);\\n    }\\n\\n    function _releaseNFT(uint256 key) internal override onlyOwner returns (bool) {\\n        require(_timeToRelease <= block.timestamp, 'Farm is running');\\n        return super._releaseNFT(key);\\n    }\\n\\n    function getPoolByIndex(uint256 index) external view returns (address poolAddress) {\\n        poolAddress= _poolsSet.at(index);\\n    }\\n\\n    function getPoolDetails(address _token)\\n        external\\n        view\\n        returns (\\n            uint256 _shareAPR,\\n            uint256 _shareAPRBase,\\n            uint256 _minimumStake,\\n            uint256 cap_,\\n            uint256 totalSupply_,\\n            uint256 _totalShare,\\n            uint256 _totalShareBase\\n        )\\n    {\\n        _shareAPR = _pools[_token].shareAPR;\\n        _shareAPRBase = _pools[_token].shareAPRBase;\\n        _minimumStake = _pools[_token].minimumStake;\\n        cap_ = _pools[_token].cap;\\n        totalSupply_ = _pools[_token].totalSupply;\\n        _totalShare = _pools[_token].totalShare;\\n        _totalShareBase = _pools[_token].totalShareBase;\\n    }\\n\\n    function _addTokenReward(\\n        uint256 _tokenId,\\n        uint256 _priceInPoint,\\n        uint256 _minimumStakeRequired,\\n        address _nftAddress,\\n        address owner_,\\n        address _tokenLinked\\n    ) internal virtual override {\\n        if (_minimumStakeRequired > 0) {\\n            require(_poolsSet.contains(_tokenLinked), 'non exist pool');\\n        }\\n        super._addTokenReward(_tokenId, _priceInPoint, _minimumStakeRequired, _nftAddress, owner_, _tokenLinked);\\n    }\\n\\n    function getPools() external view returns (address[] memory poolAddreses) {\\n        return _poolsSet.values();\\n    }\\n}\\n\",\"keccak256\":\"0x26414924b90a4f07512aa439ddb8a65b78b591ec9f7a2d4ddaacf0cb4e041cc1\",\"license\":\"MIT\"},\"contracts/FarmTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\ncontract FarmTokens is Ownable, ERC20, ERC721Holder, ReentrancyGuard {\\n    uint256 private _cap;\\n    uint256 private _mintedPoints;\\n    uint256 private _tokenCount;\\n    struct tokenDetails {\\n        address nftAddress;\\n        address owner;\\n        uint256 tokenId;\\n        uint256 priceInPoint;\\n        // some nft might have restiction that users should stake a certain token to redeem it\\n        uint256 minimumStakeRequired;\\n        address tokenLinked;\\n    }\\n    mapping(uint256 => tokenDetails) internal rewardTokens;\\n\\n    event RewardReleased(address indexed owner, address indexed token, uint256 key, uint256 tokenId, uint256 timestamp);\\n    event RewardClaimed(\\n        address indexed claimer,\\n        address indexed token,\\n        uint256 key,\\n        uint256 tokenId,\\n        uint256 timestamp\\n    );\\n    event RewardAdded(\\n        address indexed owner,\\n        address indexed nftAddress,\\n        address tokenLinked,\\n        uint256 tokenId,\\n        uint256 priceInPoint,\\n        uint256 minimumStakeRequired,\\n        uint256 timestamp\\n    );\\n\\n    constructor() ERC20('Startfi Reward Token', 'RSTFI') {}\\n\\n    function mintedPoints() external view returns (uint256) {\\n        return _mintedPoints;\\n    }\\n\\n    function rewardTokenDetails(uint256 _id)\\n        external\\n        view\\n        returns (\\n            address _nftAddress,\\n            address _owner,\\n            uint256 _tokenId,\\n            uint256 _priceInPoint,\\n            uint256 _minimumStakeRequired,\\n            address _tokenLinked\\n        )\\n    {\\n        _nftAddress = rewardTokens[_id].nftAddress;\\n        _owner = rewardTokens[_id].owner;\\n        _tokenId = rewardTokens[_id].tokenId;\\n        _priceInPoint = rewardTokens[_id].priceInPoint;\\n        _minimumStakeRequired = rewardTokens[_id].minimumStakeRequired;\\n        _tokenLinked = rewardTokens[_id].tokenLinked;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    function rewardCount() external view returns (uint256) {\\n        return _tokenCount;\\n    }\\n\\n    /// @notice Only woner can call it\\n\\n    function _addTokenReward(\\n        uint256 _tokenId,\\n        uint256 _priceInPoint,\\n        uint256 _minimumStakeRequired,\\n        address _nftAddress,\\n        address owner_,\\n        address _tokenLinked\\n    ) internal virtual onlyOwner {\\n        require(_priceInPoint != 0 && _nftAddress != address(0) && owner_ != address(0), 'Zero values not allowed');\\n\\n        require(\\n            IERC721(_nftAddress).getApproved(_tokenId) == address(this) ||\\n                IERC721(_nftAddress).isApprovedForAll(owner_, address(this)),\\n            'Not approved'\\n        );\\n        rewardTokens[_tokenCount] = tokenDetails(\\n            _nftAddress,\\n            owner_,\\n            _tokenId,\\n            _priceInPoint,\\n            _minimumStakeRequired,\\n            _tokenLinked\\n        );\\n        _cap += _priceInPoint;\\n        _tokenCount++;\\n        emit RewardAdded(\\n            owner_,\\n            _nftAddress,\\n            _tokenLinked,\\n            _tokenId,\\n            _priceInPoint,\\n            _minimumStakeRequired,\\n            block.timestamp\\n        );\\n\\n        _transferNFT(_nftAddress, _tokenId, owner_, address(this));\\n    }\\n\\n    function _transferNFT(\\n        address _nftAddress,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal nonReentrant returns (bool) {\\n        IERC721(_nftAddress).safeTransferFrom(from, to, tokenId);\\n        return true;\\n    }\\n\\n    // TODO: add time check condition\\n    function _releaseNFT(uint256 key) internal virtual returns (bool) {\\n        require(ERC20.totalSupply() >= rewardTokens[key].priceInPoint, 'Can not release, users can sell it');\\n        address nftAddress = rewardTokens[key].nftAddress;\\n        address owner_ = rewardTokens[key].owner;\\n        uint256 tokenId = rewardTokens[key].tokenId;\\n        require(IERC721(nftAddress).ownerOf(tokenId) == address(this), 'UnAuthorized');\\n        emit RewardReleased(owner_, nftAddress, key, tokenId, block.timestamp);\\n        _transferNFT(nftAddress, tokenId, address(this), owner_);\\n        return true;\\n    }\\n\\n    function _claimReward(uint256 key, address _user) internal virtual returns (bool) {\\n        uint256 price = rewardTokens[key].priceInPoint;\\n        require(balanceOf(_user) >= price, 'Insufficient fund');\\n        // burn decrease the total supply which might be vulnarabity when we try to enforce cap\\n        _burn(_user, price);\\n        address nftAddress = rewardTokens[key].nftAddress;\\n        uint256 tokenId = rewardTokens[key].tokenId;\\n        require(IERC721(nftAddress).ownerOf(tokenId) == address(this), 'UnAuthorized');\\n        emit RewardClaimed(_user, nftAddress, key, tokenId, block.timestamp);\\n\\n        _transferNFT(nftAddress, tokenId, address(this), _user);\\n        return true;\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        // require(ERC20.totalSupply() + amount <= _cap, 'cap exceeded');\\n        require(_mintedPoints + amount <= _cap, 'Mint: cap exceeded');\\n        _mintedPoints += amount;\\n        super._mint(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa0f66ff9672cb96d67a50b3e94774a7fa8584897b39b8fd6273ffee72b8ea075\",\"license\":\"MIT\"},\"contracts/StartfiFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport './UserPools.sol';\\n\\n/// @title Startfi farm contract where users stake their tokens and get NFT as rewards\\n\\ncontract StartfiFarm is UserPools {\\n    constructor(\\n        uint256 launchTime_,\\n        uint256 deadline_,\\n        uint256 timeToRelease_\\n    ) FarmPools(launchTime_, deadline_, timeToRelease_) {}\\n\\n \\n\\n    /// @param user user address\\n    ///  @return  currentUserPools user's pool addresses\\n\\n    function getUserPools(address user) external view returns (address[] memory currentUserPools) {\\n        currentUserPools= _getUserPools(user);\\n    }\\n\\n    /// @notice get pool details related to certain user\\n    /// @param user user address\\n    /// @param token pool token address\\n\\n    /// @return amount user stakes in this pool\\n    /// @return lastRewardBlock last redeeming time\\n    /// @return stakeTime  time of staking\\n    function userPoolDetails(address user, address token)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 lastRewardBlock,\\n            uint256 stakeTime\\n        )\\n    {\\n        return _userPoolDetails(user, token);\\n    }\\n\\n    // ony before launch time\\n    /// @notice let user to stake tokens in a certain pool\\n    /// @dev ony before launch time\\n    /// @param _token pool token address\\n    /// @param _amount user stakes to be added to this pool\\n\\n    function stake(address _token, uint256 _amount) external {\\n        require(_stake(_msgSender(), _token, _amount), 'Invalid stake operation');\\n    }\\n\\n    // ony before launch time\\n    /// @notice let user to stake in maltible pools in a single transaction\\n    /// @dev ony before launch time,\\n    /// @dev both function arguments length must be identical\\n    /// @param _amounts array of values to be staked for each pool\\n    /// @param _tokens array of pool tokens address\\n    function stakeBatch(address[] calldata _tokens, uint256[] calldata _amounts) external {\\n        require(_tokens.length == _amounts.length, 'Mismatch array length');\\n        for (uint256 index = 0; index < _tokens.length; index++) {\\n            require(_stake(_msgSender(), _tokens[index], _amounts[index]), 'Invalid stake operation');\\n        }\\n    }\\n\\n    /// @notice user can redeem nft at any time as long as his balance of Rstfi >= the required price \\\" points\\\"\\n    // we should check if this nft has conditions to apply\\n    /// @dev only staker can call it\\n\\n    /// @param key nft id\\n    function claim(uint256 key) external {\\n        require(_claimReward(key, _msgSender()), 'Invalid claim operation');\\n    }\\n\\n    /// @notice if user wants to claim the nft reward and the user's rewards balance of group of pools is more than or equal the required points for that nft, user can call this function rather than redeem -> claim scenario where user has to send many transaction to get the nft\\n    /// @dev only staker can call it\\n\\n    /// @param _tokens array of pool tokens address\\n    /// @param key nft id\\n\\n    function redeemAndClaim(address[] calldata _tokens, uint256 key) external {\\n        for (uint256 index = 0; index < _tokens.length; index++) {\\n            require(_redeemPoint(_msgSender(), _tokens[index]), 'Invalid redeem operation');\\n        }\\n        require(_claimReward(key, _msgSender()), 'Invalid claim operation');\\n    }\\n\\n    /// @notice Let user redeem token from many pools at once\\n    /// @dev only staker can call it\\n\\n    /// @param _tokens array of pool tokens address\\n\\n    function redeemBatch(address[] calldata _tokens) external {\\n        for (uint256 index = 0; index < _tokens.length; index++) {\\n            require(_redeemPoint(_msgSender(), _tokens[index]), 'Invalid redeem operation');\\n        }\\n    }\\n\\n    /// @notice users call this functions any time to redeem points for their pool stakes\\n    /// @dev : calling this function mints point for the caller based on the reward algorithm applied\\n    /// @dev only staker can call it\\n\\n    /// @param _token pool token address\\n\\n    function redeem(address _token) external {\\n        require(_redeemPoint(_msgSender(), _token), 'Invalid redeem operation');\\n    }\\n\\n    //\\n    /// @notice When the fram ends, users can set their stakes free by calling this function\\n    /// @dev only after deadline\\n    /// @dev only staker can call it\\n\\n    /// @param _token pool token address\\n\\n    function unstake(address _token) external {\\n        require(_unstake(_msgSender(), _token), 'Invalid unstake operation');\\n    }\\n\\n    /// @notice Let user unstake token from many pools at once\\n    /// @dev only staker can call it\\n\\n    /// @param _tokens array of pool tokens address\\n    function unstakeBatch(address[] calldata _tokens) external {\\n        for (uint256 index = 0; index < _tokens.length; index++) {\\n            require(_unstake(_msgSender(), _tokens[index]), 'Invalid unstake operation');\\n        }\\n    }\\n\\n    /// @notice before the farm starts, users can set their stakes free by calling this function\\n    /// @dev only before launchtime\\n    /// @dev only staker can call it\\n\\n    /// @param _token pool token address\\n    function unStakeEarly(address _token) external {\\n        require(_unstakeEarly(_msgSender(), _token), 'Invalid stake operation');\\n    }\\n\\n    /// @notice before the farm starts, Let user unstake token from many pools at once\\n    /// @dev only before launchtime\\n    /// @dev only staker can call it\\n    /// @param _tokens array of pool tokens address\\n    function unStakeEarlyBatch(address[] calldata _tokens) external {\\n        for (uint256 index = 0; index < _tokens.length; index++) {\\n            require(_unstakeEarly(_msgSender(), _tokens[index]), 'Invalid stake operation');\\n        }\\n    }\\n\\n    /// @notice create new pool\\n    /// @dev only owner can call it\\n    /// @param _token erc20 token address\\n    /// @param _shareAPR perenage numerator of the pool APR generated\\n    /// @param  _shareAPRBase perenage denominator of the pool APR generated\\n    /// @param  _minimumStake minimum amount user should stake in order to participatin in this pool\\n    /// @param  cap_ the maxmum amount of token to be staked in this pool\\n    /// @param  _totalShare perenage numerator of pool share of the farm overall points\\n    /// @param  _totalShareBase perenage denominator of pool share of the farm overall points\\n    function addPool(\\n        address _token,\\n        uint256 _shareAPR,\\n        uint256 _shareAPRBase,\\n        uint256 _minimumStake,\\n        uint256 cap_,\\n        uint256 _totalShare,\\n        uint256 _totalShareBase\\n    ) external {\\n        _addPool(_token, _shareAPR, _shareAPRBase, _minimumStake, cap_, _totalShare, _totalShareBase);\\n    }\\n\\n    /// @notice add the nft rewards that users will claim\\n    /// @dev only owner can call it\\n    /// @dev nft point increase the RSFTI cap\\n    /// @param  _tokenId nft token id\\n    /// @param  _priceInPoint how many point required to calim it\\n    /// @param  _minimumStakeRequired optional, for projects the would enforce user to stake their token in order to calim their rewards\\n    /// @param  _nftAddress nft contract address\\n    /// @param  owner_ the owner of this nft , this is used as well to return the nft back if no one calim it with no points left in the farm\\n    /// @param  _tokenLinked optinal , pool token address, only if `_minimumStakeRequired` is used to check if the staker is participating in the pool\\n\\n    function addTokenReward(\\n        uint256 _tokenId,\\n        uint256 _priceInPoint,\\n        uint256 _minimumStakeRequired,\\n        address _nftAddress,\\n        address owner_,\\n        address _tokenLinked\\n    ) external {\\n      \\n        _addTokenReward(_tokenId, _priceInPoint, _minimumStakeRequired, _nftAddress, owner_, _tokenLinked);\\n    }\\n\\n    /// @notice to protect nfts from being locked in the contract , owner can call it after the time to release and return it back to the original owner as long as minted point is less than the reward `_priceInPoint`\\n    /// @dev only  owner can call it\\n    /// @dev called only after the `_timeToRelease`\\n\\n    function releaseNFT(uint256 key) external {\\n        _releaseNFT(key);\\n    }\\n}\\n\",\"keccak256\":\"0xe80b998e98abadb2d0e41a1d7d4081e2a15b8c62d573e1d915ec9b6559913b4c\",\"license\":\"MIT\"},\"contracts/UserPools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n// import 'hardhat/console.sol';\\n\\nimport './FarmPools.sol';\\nimport './lib/SafeDecimalMath.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nabstract contract UserPools is FarmPools {\\n    using SafeDecimalMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct userPool {\\n        // address token;\\n        uint256 amount;\\n        uint256 stakeTime;\\n        uint256 lastRewardBlock;\\n    }\\n    // user address to token address to stake details\\n    mapping(address => mapping(address => userPool)) private userPools;\\n    mapping(address => EnumerableSet.AddressSet) private _userToPools;\\n\\n    event Stake(address indexed staker, address indexed pool, uint256 amount, uint256 timestamp);\\n    event Unstake(address indexed staker, address indexed pool, uint256 amount, uint256 timestamp);\\n    event Redeem(address indexed redeemer, address indexed pool, uint256 amount, uint256 timestamp);\\n\\n    /// @notice calculate user rewards at the call time ( between launchtime to deadline) in all user pools\\n    /// @param user user address\\n    /// @return _totalRewards number of rewards\\n    function userRewards(address user) external view returns (uint256 _totalRewards) {\\n        address[] memory _userPools = _userToPools[user].values();\\n        uint256 currentBlock = _farmDeadline > block.timestamp ? block.timestamp : _farmDeadline;\\n        for (uint256 index = 0; index < _userPools.length; index++) {\\n            _totalRewards += _getUserRewards(user, _userPools[index], currentBlock);\\n        }\\n    }\\n\\n    /// @notice calculate user rewards at the call time ( between launchtime to deadline) in a certain pool\\n    /// @param _user user address\\n    /// @param _token pool token address\\n    /// @return _totalRewards number of rewards\\n    function userPoolReward(address _user, address _token) external view returns (uint256 _totalRewards) {\\n        uint256 currentBlock = _farmDeadline > block.timestamp ? block.timestamp : _farmDeadline;\\n        _totalRewards= _getUserRewards(_user, _token, currentBlock);\\n    }\\n\\n    function _calcReward(\\n        uint256 amount,\\n        uint256 shareAPR,\\n        uint256 baseAPR,\\n        uint256 rewardBlocks\\n    ) public pure returns (uint256) {\\n        // get the rate e.g. who much points for x amount stake in y pool\\n        uint256 rate = amount * (shareAPR.divideDecimal(baseAPR * 100));\\n        // multiply in duration to get the reward now since the the staking time\\n        return rate.multiplyDecimal(rewardBlocks);\\n    }\\n\\n    function _userPoolDetails(address user, address token)\\n        internal\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 lastRewardBlock,\\n            uint256 stakeTime\\n        )\\n    {\\n        amount = userPools[user][token].amount;\\n        lastRewardBlock = userPools[user][token].lastRewardBlock;\\n        stakeTime = userPools[user][token].stakeTime;\\n\\n        // (amount, stakeTime, lastRewardBlock) = userPools[user][token];\\n    }\\n\\n    function _getUserRewards(\\n        address _user,\\n        address _token,\\n        uint256 currentBlock\\n    ) private view returns (uint256 userReward) {\\n        uint256 lastRewardBlock = userPools[_user][_token].lastRewardBlock;\\n\\n        uint256 amount = userPools[_user][_token].amount;\\n        if (currentBlock > lastRewardBlock) {\\n            uint256 rewardBlocks = currentBlock - lastRewardBlock;\\n            userReward = _calcReward(amount, _pools[_token].shareAPR, _pools[_token].shareAPRBase, rewardBlocks);\\n        }\\n    }\\n\\n    function _getUserPools(address user) internal view returns (address[] memory currentUserPools) {\\n        currentUserPools= _userToPools[user].values();\\n    }\\n\\n    function _stake(\\n        address _user,\\n        address _token,\\n        uint256 _amount\\n    ) internal canStake(_user, _token, _amount) returns (bool) {\\n        uint256 _totalshare = _pools[_token].totalSupply + _amount;\\n        require(_totalshare <= _pools[_token].cap, 'Stake: Pool Cap exceeded');\\n        uint256 stakeAmount = _amount;\\n        if (_userToPools[_user].contains(_token)) {\\n            stakeAmount = userPools[_user][_token].amount + _amount;\\n        } else {\\n            _userToPools[_user].add(_token);\\n        }\\n        _pools[_token].totalSupply = _totalshare;\\n        userPools[_user][_token] = userPool(stakeAmount, block.timestamp, _launchTime);\\n\\n        // emit event here\\n        emit Stake(_user, _token, _amount, block.timestamp);\\n        return IERC20(_token).transferFrom(_user, address(this), _amount);\\n    }\\n\\n    function _unstake(address _user, address _token) internal canUnstake returns (bool) {\\n        _redeemPoint(_user, _token);\\n        uint256 amount = userPools[_user][_token].amount;\\n        userPools[_user][_token].amount = 0;\\n        emit Unstake(_user, _token, amount, block.timestamp);\\n\\n        return IERC20(_token).transfer(_user, amount);\\n    }\\n\\n    function _unstakeEarly(address _user, address _token) internal canUnStakeEarly returns (bool) {\\n        uint256 amount = userPools[_user][_token].amount;\\n        require(amount <= _pools[_token].totalSupply, 'Invalid unstake operation');\\n        _pools[_token].totalSupply -= amount;\\n        userPools[_user][_token].amount = 0;\\n        emit Unstake(_user, _token, amount, block.timestamp);\\n\\n        return IERC20(_token).transfer(_user, amount);\\n    }\\n\\n    function _redeemPoint(address _user, address _token) internal returns (bool redeemed) {\\n        require(_userToPools[_user].contains(_token), 'Non exist');\\n        uint256 lastRewardBlock = userPools[_user][_token].lastRewardBlock;\\n        if (lastRewardBlock < _farmDeadline) {\\n            uint256 currentBlock = _farmDeadline > block.timestamp ? block.timestamp : _farmDeadline;\\n            uint256 userTotalRewards = _getUserRewards(_user, _token, currentBlock);\\n            if (userTotalRewards > 0) {\\n                userPools[_user][_token].lastRewardBlock = block.timestamp;\\n                emit Redeem(_user, _token, userTotalRewards, block.timestamp);\\n\\n                _mint(_user, userTotalRewards);\\n                redeemed = true;\\n            }\\n\\n            // emit event here\\n        }\\n    }\\n\\n\\n    function _claimReward(uint256 key, address _user) internal virtual override returns (bool) {\\n        uint256 minimumStakeRequired = rewardTokens[key].minimumStakeRequired;\\n        if (minimumStakeRequired > 0) {\\n            require(minimumStakeRequired >= userPools[_user][rewardTokens[key].tokenLinked].amount);\\n        }\\n\\n        return super._claimReward(key, _user);\\n    }\\n}\\n\",\"keccak256\":\"0xad101a264162416063e61a2ecfa3f93d6782842d35c489c66c12b2871b10a10c\",\"license\":\"MIT\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.4;\\n\\n// Libraries\\n\\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\nlibrary SafeDecimalMath {\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint256 public constant UNIT = 10**uint256(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint256 public constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint256(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint256) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return (x * y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint256 quotientTimesTen = (x * y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return ((x * UNIT) / y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        uint256 resultTimesTen = ((x * (precisionUnit * 10)) / y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\\n        return i * UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR;\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\\n        uint256 quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    // Computes `a - b`, setting the value to 0 if b > a.\\n    function floorsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return b >= a ? 0 : a - b;\\n    }\\n}\\n\",\"keccak256\":\"0xf0ed2fd6c86b51ca16111caf1ea5142885852ac4f5d18ef326f8ac84309cd0c0\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162004915380380620049158339810160408190526200003491620002b4565b8282826040518060400160405280601481526020017f537461727466692052657761726420546f6b656e00000000000000000000000081525060405180604001604052806005815260200164525354464960d81b815250620000a56200009f620001ba60201b60201c565b620001be565b8151620000ba9060049060208501906200020e565b508051620000d09060059060208401906200020e565b50506001600655508282116200013e5760405162461bcd60e51b815260206004820152602860248201527f4c61756e63682074696d652073686f756c64206265206c657373207468656e20604482015267646561646c696e6560c01b60648201526084015b60405180910390fd5b818111620001a15760405162461bcd60e51b815260206004820152602960248201527f646561646c696e652073686f756c64206265206c657373207468656e2072656c604482015268656173652074696d6560b81b606482015260840162000135565b60a09190915260c091909152608052506200031f915050565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200021c90620002e2565b90600052602060002090601f0160209004810192826200024057600085556200028b565b82601f106200025b57805160ff19168380011785556200028b565b828001600101855582156200028b579182015b828111156200028b5782518255916020019190600101906200026e565b50620002999291506200029d565b5090565b5b808211156200029957600081556001016200029e565b600080600060608486031215620002c9578283fd5b8351925060208401519150604084015190509250925092565b600181811c90821680620002f757607f821691505b602082108114156200031957634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c0516145796200039c6000396000818161052501528181611dd2015281816123f6015261286501526000818161043e0152818161088e015281816108b401528181610a2901528181610a4f0152818161219b015281816121c6015281816121ec01526122ea01526000611d3101526145796000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c80637908542511610186578063a9059cbb116100e3578063ce47e73e11610097578063dd62ed3e11610071578063dd62ed3e146107eb578063f2888dbb14610831578063f2fde38b1461084457600080fd5b8063ce47e73e1461072f578063d3e90fa014610742578063d8143860146107d857600080fd5b8063bc0e610a116100c8578063bc0e610a146106f6578063bf60269214610709578063cc73c66f1461071c57600080fd5b8063a9059cbb146106d0578063adc9772e146106e357600080fd5b806395a2251f1161013a5780639816af581161011f5780639816af5814610697578063a0378aec146106aa578063a457c2d7146106bd57600080fd5b806395a2251f1461067c57806395d89b411461068f57600080fd5b80637d447b221161016b5780637d447b22146105495780637dede9c1146105b75780638da5cb5b1461065e57600080fd5b8063790854251461051b578063790ca4131461052357600080fd5b806335630a3e1161023f5780635e5ba8d7116101f35780636ced6d36116101cd5780636ced6d36146104ca57806370a08231146104dd578063715018a61461051357600080fd5b80635e5ba8d71461046a578063673a2a1f1461047d5780636ce0c4b51461049257600080fd5b8063395093511161022457806339509351146104295780634acaeea61461043c578063568148781461046257600080fd5b806335630a3e14610401578063379607f51461041657600080fd5b8063150b7a021161029657806323b872dd1161027b57806323b872dd146103d7578063313ce567146103ea578063355274ea146103f957600080fd5b8063150b7a021461036757806318160ddd146103cf57600080fd5b806306fdde03116102c757806306fdde031461031c57806308206a7714610331578063095ea7b31461034457600080fd5b80630660f1e8146102e357806306af075014610309575b600080fd5b6102f66102f1366004613d9f565b610857565b6040519081526020015b60405180910390f35b6102f661031736600461416e565b610959565b610324610991565b60405161030091906141f9565b6102f661033f366004613dd7565b610a23565b610357610352366004613f46565b610a8a565b6040519015158152602001610300565b61039e610375366004613e4f565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610300565b6003546102f6565b6103576103e5366004613e0f565b610aa1565b60405160128152602001610300565b6007546102f6565b61041461040f366004614108565b610b8c565b005b6104146104243660046140d8565b610ba2565b610357610437366004613f46565b610c15565b7f00000000000000000000000000000000000000000000000000000000000000006102f6565b6008546102f6565b6104146104783660046140d8565b610c5e565b610485610c6b565b604051610300919061419f565b6104a56104a03660046140d8565b610c7c565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610300565b6104146104d8366004613d9f565b610c89565b6102f66104eb366004613d9f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b610414610cf9565b6009546102f6565b7f00000000000000000000000000000000000000000000000000000000000000006102f6565b61059c610557366004613dd7565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526010602090815260408083209390941682529190915220805460028201546001909201549092565b60408051938452602084019290925290820152606001610300565b6106156105c53660046140d8565b6000908152600a602052604090208054600182015460028301546003840154600485015460059095015473ffffffffffffffffffffffffffffffffffffffff948516969385169592949193911690565b6040805173ffffffffffffffffffffffffffffffffffffffff978816815295871660208701528501939093526060840191909152608083015290911660a082015260c001610300565b60005473ffffffffffffffffffffffffffffffffffffffff166104a5565b61041461068a366004613d9f565b610d86565b610324610df6565b6104856106a5366004613d9f565b610e05565b6104146106b8366004613fc5565b610e10565b6103576106cb366004613f46565b610eef565b6103576106de366004613f46565b610fc7565b6104146106f1366004613f46565b610fd4565b610414610704366004613fc5565b611045565b61041461071736600461406e565b61111f565b61041461072a366004613f71565b611250565b61041461073d366004613fc5565b611268565b6107a3610750366004613d9f565b73ffffffffffffffffffffffffffffffffffffffff166000908152600f60205260409020805460018201546002830154600384015460048501546005860154600690960154949693959294919390929190565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610300565b6104146107e6366004614005565b611342565b6102f66107f9366004613dd7565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205490565b61041461083f366004613d9f565b6114cc565b610414610852366004613d9f565b61153c565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601160205260408120819061088790611669565b90506000427f0000000000000000000000000000000000000000000000000000000000000000116108d8577f00000000000000000000000000000000000000000000000000000000000000006108da565b425b905060005b82518110156109515761093385848381518110610925577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518461167d565b61093d908561426a565b9350806109498161448a565b9150506108df565b505050919050565b60008061097161096a8560646143e2565b8690611716565b61097b90876143e2565b90506109878184611739565b9695505050505050565b6060600480546109a090614436565b80601f01602080910402602001604051908101604052809291908181526020018280546109cc90614436565b8015610a195780601f106109ee57610100808354040283529160200191610a19565b820191906000526020600020905b8154815290600101906020018083116109fc57829003601f168201915b5050505050905090565b600080427f000000000000000000000000000000000000000000000000000000000000000011610a73577f0000000000000000000000000000000000000000000000000000000000000000610a75565b425b9050610a8284848361167d565b949350505050565b6000610a97338484611751565b5060015b92915050565b6000610aae848484611904565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915290205482811015610b74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610b818533858403611751565b506001949350505050565b610b9a868686868686611bb8565b505050505050565b610bac8133611c3d565b610c12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c696420636c61696d206f7065726174696f6e0000000000000000006044820152606401610b6b565b50565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091610a97918590610c5990869061426a565b611751565b610c6781611cac565b5050565b6060610c77600d611669565b905090565b6000610a9b600d83611dc1565b610c933382611dcd565b610c12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964207374616b65206f7065726174696f6e0000000000000000006044820152606401610b6b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6b565b610d846000612059565b565b610d9033826120ce565b610c12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c69642072656465656d206f7065726174696f6e00000000000000006044820152606401610b6b565b6060600580546109a090614436565b6060610a9b826122b5565b60005b81811015610eea57610e7233848484818110610e58577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e6d9190613d9f565b6122e6565b610ed8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420756e7374616b65206f7065726174696f6e000000000000006044820152606401610b6b565b80610ee28161448a565b915050610e13565b505050565b33600090815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205482811015610fb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610b6b565b610fbd3385858403611751565b5060019392505050565b6000610a97338484611904565b610fdf3383836123ef565b610c67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964207374616b65206f7065726174696f6e0000000000000000006044820152606401610b6b565b60005b81811015610eea576110a73384848481811061108d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110a29190613d9f565b6120ce565b61110d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c69642072656465656d206f7065726174696f6e00000000000000006044820152606401610b6b565b806111178161448a565b915050611048565b60005b828110156111df576111673385858481811061108d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6111cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c69642072656465656d206f7065726174696f6e00000000000000006044820152606401610b6b565b806111d78161448a565b915050611122565b506111ea8133611c3d565b610eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c696420636c61696d206f7065726174696f6e0000000000000000006044820152606401610b6b565b61125f87878787878787612a4f565b50505050505050565b60005b81811015610eea576112ca338484848181106112b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906112c59190613d9f565b611dcd565b611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964207374616b65206f7065726174696f6e0000000000000000006044820152606401610b6b565b8061133a8161448a565b91505061126b565b8281146113ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d69736d61746368206172726179206c656e67746800000000000000000000006044820152606401610b6b565b60005b838110156114c55761144d338686848181106113f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906114089190613d9f565b858585818110611441577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356123ef565b6114b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964207374616b65206f7065726174696f6e0000000000000000006044820152606401610b6b565b806114bd8161448a565b9150506113ae565b5050505050565b6114d633826122e6565b610c12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420756e7374616b65206f7065726174696f6e000000000000006044820152606401610b6b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff8116611660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b6b565b610c1281612059565b6060600061167683612df4565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff83811660009081526010602090815260408083209386168352929052908120600281015490548184111561170d5760006116cc838661441f565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600f6020526040902080546001909101549192506117099184919084610959565b9350505b50509392505050565b6000816117256012600a61431c565b61172f90856143e2565b6116769190614282565b60006117476012600a61431c565b61172f83856143e2565b73ffffffffffffffffffffffffffffffffffffffff83166117f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff8216611896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166119a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff8216611a4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205481811015611b00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020526040808220858503905591851681529081208054849290611b4490849061426a565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611baa91815260200190565b60405180910390a350505050565b8315611c2f57611bc9600d82612e50565b611c2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f6e20657869737420706f6f6c0000000000000000000000000000000000006044820152606401610b6b565b610b9a868686868686612e7f565b6000828152600a60205260408120600401548015611ca25773ffffffffffffffffffffffffffffffffffffffff8084166000908152601060209081526040808320888452600a83528184206005015490941683529290522054811015611ca257600080fd5b610a8284846132de565b6000805473ffffffffffffffffffffffffffffffffffffffff163314611d2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6b565b427f00000000000000000000000000000000000000000000000000000000000000001115611db8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4661726d2069732072756e6e696e6700000000000000000000000000000000006044820152606401610b6b565b610a9b8261355a565b600061167683836137d6565b6000427f000000000000000000000000000000000000000000000000000000000000000011611e58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b696e67206973206c6f636b65640000000000000000000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152601060209081526040808320938616835292815282822054600f90915291902060040154811115611f02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420756e7374616b65206f7065726174696f6e000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600f602052604081206004018054839290611f3a90849061441f565b909155505073ffffffffffffffffffffffffffffffffffffffff848116600081815260106020908152604080832094881680845294825280832092909255815185815242918101919091527f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef91015b60405180910390a36040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561202157600080fd5b505af1158015612035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8291906140b8565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526011602052604081206120fd9083612e50565b612163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f6e20657869737400000000000000000000000000000000000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152601060209081526040808320938616835292905220600201547f00000000000000000000000000000000000000000000000000000000000000008110156122ae576000427f000000000000000000000000000000000000000000000000000000000000000011612210577f0000000000000000000000000000000000000000000000000000000000000000612212565b425b9050600061222186868461167d565b905080156122ab5773ffffffffffffffffffffffffffffffffffffffff8681166000818152601060209081526040808320948a16808452948252918290204260029091018190558251868152918201527f3f693fff038bb8a046aa76d9516190ac7444f7d69cf952c4cbdc086fdef2d6fc910160405180910390a36122a68682613827565b600193505b50505b5092915050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601160205260409020606090610a9b90611669565b60007f00000000000000000000000000000000000000000000000000000000000000004211612371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b696e67206973206c6f636b65640000000000000000000000000000006044820152606401610b6b565b61237b83836120ce565b5073ffffffffffffffffffffffffffffffffffffffff8381166000818152601060209081526040808320948716808452948252808320805493905580518381524292810192909252919392917f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef9101611fa9565b60008383837f0000000000000000000000000000000000000000000000000000000000000000421061247d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b696e67206973206c6f636b65640000000000000000000000000000006044820152606401610b6b565b612488600d83612e50565b6124ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f6e2065786973746520706f6f6c00000000000000000000000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600f6020526040902060020154811015612580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6c657373207468616e20746865206d696e696d756d20616d6f756e74000000006044820152606401610b6b565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015230602483015282919084169063dd62ed3e9060440160206040518083038186803b1580156125f057600080fd5b505afa158015612604573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262891906140f0565b1015612690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f7420616c6c6f7765640000000000000000000000000000000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600f60205260408120600401546126c490879061426a565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600f6020526040902060030154909150811115612759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5374616b653a20506f6f6c2043617020657863656564656400000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff88166000908152601160205260409020869061278a9089612e50565b156127d45773ffffffffffffffffffffffffffffffffffffffff808a166000908152601060209081526040808320938c16835292905220546127cd90889061426a565b9050612805565b73ffffffffffffffffffffffffffffffffffffffff8916600090815260116020526040902061280390896138c2565b505b81600f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555060405180606001604052808281526020014281526020017f0000000000000000000000000000000000000000000000000000000000000000815250601060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f63602d0ecc7b3a0ef7ff1a116e23056662d64280355ba8031b6d0d767c4b4458894260405161298c929190918252602082015260400190565b60405180910390a36040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152306024830152604482018990528916906323b872dd90606401602060405180830381600087803b158015612a0a57600080fd5b505af1158015612a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4291906140b8565b9998505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612ad0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6b565b612ada8282611716565b600c54612ae7919061426a565b600c819055606490612b0290670de0b6b3a764000090614282565b1115612b6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f65786365656420636170000000000000000000000000000000000000000000006044820152606401610b6b565b8515801590612b7857508415155b8015612b8357508315155b8015612b8e57508215155b8015612b9957508115155b8015612ba457508015155b8015612bc5575073ffffffffffffffffffffffffffffffffffffffff871615155b612c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5a65726f2076616c756573206e6f7420616c6c6f7765640000000000000000006044820152606401610b6b565b612c36600d88612e50565b15612c9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4475706c6963617465642076616c7565206973206e6f7420616c6c6f776564006044820152606401610b6b565b612ca8600d886138c2565b506040518060e001604052808781526020018681526020018581526020018481526020016000815260200183815260200182815250600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c082015181600601559050507f7f8e778ea5a2b6d01c30940e77a7bc8973710ae3df7a9621a0eb875dc0ea6a2d87878787878787604051612de3979695949392919073ffffffffffffffffffffffffffffffffffffffff979097168752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405180910390a150505050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612e4457602002820191906000526020600020905b815481526020019060010190808311612e30575b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001830160205260408120541515611676565b60005473ffffffffffffffffffffffffffffffffffffffff163314612f00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6b565b8415801590612f24575073ffffffffffffffffffffffffffffffffffffffff831615155b8015612f45575073ffffffffffffffffffffffffffffffffffffffff821615155b612fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5a65726f2076616c756573206e6f7420616c6c6f7765640000000000000000006044820152606401610b6b565b6040517f081812fc00000000000000000000000000000000000000000000000000000000815260048101879052309073ffffffffffffffffffffffffffffffffffffffff85169063081812fc9060240160206040518083038186803b15801561301357600080fd5b505afa158015613027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304b9190613dbb565b73ffffffffffffffffffffffffffffffffffffffff16148061310d57506040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015230602483015284169063e985e9c59060440160206040518083038186803b1580156130d557600080fd5b505afa1580156130e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310d91906140b8565b613173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420617070726f76656400000000000000000000000000000000000000006044820152606401610b6b565b6040805160c08101825273ffffffffffffffffffffffffffffffffffffffff808616825284811660208084019182528385018b8152606085018b8152608086018b815288861660a088019081526009546000908152600a909552978420965187549087167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161788559451600188018054918816918716919091179055915160028701555160038601555160048501559351600590930180549390921692169190911790556007805487929061324c90849061426a565b9091555050600980549060006132618361448a565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff83811682526020820189905291810187905260608101869052426080820152818516918416907f700053cd107377aa59290948ce358a84e039c1bdad2494b74d22dd63d11787e39060a00160405180910390a361125f838784306138e4565b6000828152600a60205260408120600301548061331d8473ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b1015613385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e73756666696369656e742066756e640000000000000000000000000000006044820152606401610b6b565b61338f83826139f9565b6000848152600a602052604090819020805460029091015491517f6352211e0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff909116919030908390636352211e9060240160206040518083038186803b15801561341257600080fd5b505afa158015613426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344a9190613dbb565b73ffffffffffffffffffffffffffffffffffffffff16146134c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f556e417574686f72697a656400000000000000000000000000000000000000006044820152606401610b6b565b8173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f17db246e2b79d27e01c800967d89cbee46000807213e933b6e4c4fddac899a78888442604051613539939291909283526020830191909152604082015260600190565b60405180910390a361354d828230886138e4565b5060019695505050505050565b6000818152600a602052604081206003015461357560035490565b1015613603576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f43616e206e6f742072656c656173652c2075736572732063616e2073656c6c2060448201527f69740000000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b6000828152600a6020526040908190208054600182015460029092015492517f6352211e0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff91821693919092169130908490636352211e9060240160206040518083038186803b15801561368f57600080fd5b505afa1580156136a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c79190613dbb565b73ffffffffffffffffffffffffffffffffffffffff1614613744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f556e417574686f72697a656400000000000000000000000000000000000000006044820152606401610b6b565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc5e594fd91506aa39ba7b825e73f11e6db93567d501772ff7af6981f006fd3318784426040516137b6939291909283526020830191909152604082015260600190565b60405180910390a36137ca838230856138e4565b50600195945050505050565b6000826000018281548110613814577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60075481600854613838919061426a565b11156138a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4d696e743a2063617020657863656564656400000000000000000000000000006044820152606401610b6b565b80600860008282546138b2919061426a565b90915550610c6790508282613be6565b60006116768373ffffffffffffffffffffffffffffffffffffffff8416613d06565b600060026006541415613953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b6b565b60026006556040517f42842e0e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528381166024830152604482018690528616906342842e0e90606401600060405180830381600087803b1580156139d057600080fd5b505af11580156139e4573d6000803e3d6000fd5b50505050600190506001600655949350505050565b73ffffffffffffffffffffffffffffffffffffffff8216613a9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090205481811015613b52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260408120838303905560038054849290613b8e90849061441f565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8216613c63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610b6b565b8060036000828254613c75919061426a565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290613caf90849061426a565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000818152600183016020526040812054613d4d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a9b565b506000610a9b565b60008083601f840112613d66578081fd5b50813567ffffffffffffffff811115613d7d578182fd5b6020830191508360208260051b8501011115613d9857600080fd5b9250929050565b600060208284031215613db0578081fd5b813561167681614521565b600060208284031215613dcc578081fd5b815161167681614521565b60008060408385031215613de9578081fd5b8235613df481614521565b91506020830135613e0481614521565b809150509250929050565b600080600060608486031215613e23578081fd5b8335613e2e81614521565b92506020840135613e3e81614521565b929592945050506040919091013590565b60008060008060808587031215613e64578081fd5b8435613e6f81614521565b93506020850135613e7f81614521565b925060408501359150606085013567ffffffffffffffff80821115613ea2578283fd5b818701915087601f830112613eb5578283fd5b813581811115613ec757613ec76144f2565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613f0d57613f0d6144f2565b816040528281528a6020848701011115613f25578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215613f58578182fd5b8235613f6381614521565b946020939093013593505050565b600080600080600080600060e0888a031215613f8b578283fd5b8735613f9681614521565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b60008060208385031215613fd7578182fd5b823567ffffffffffffffff811115613fed578283fd5b613ff985828601613d55565b90969095509350505050565b6000806000806040858703121561401a578384fd5b843567ffffffffffffffff80821115614031578586fd5b61403d88838901613d55565b90965094506020870135915080821115614055578384fd5b5061406287828801613d55565b95989497509550505050565b600080600060408486031215614082578283fd5b833567ffffffffffffffff811115614098578384fd5b6140a486828701613d55565b909790965060209590950135949350505050565b6000602082840312156140c9578081fd5b81518015158114611676578182fd5b6000602082840312156140e9578081fd5b5035919050565b600060208284031215614101578081fd5b5051919050565b60008060008060008060c08789031215614120578384fd5b863595506020870135945060408701359350606087013561414081614521565b9250608087013561415081614521565b915060a087013561416081614521565b809150509295509295509295565b60008060008060808587031215614183578182fd5b5050823594602084013594506040840135936060013592509050565b6020808252825182820181905260009190848201906040850190845b818110156141ed57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016141bb565b50909695505050505050565b6000602080835283518082850152825b8181101561422557858101830151858201604001528201614209565b818111156142365783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000821982111561427d5761427d6144c3565b500190565b6000826142b6577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b600181815b8085111561431457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156142fa576142fa6144c3565b8085161561430757918102915b93841c93908002906142c0565b509250929050565b6000611676838360008261433257506001610a9b565b8161433f57506000610a9b565b8160018114614355576002811461435f5761437b565b6001915050610a9b565b60ff841115614370576143706144c3565b50506001821b610a9b565b5060208310610133831016604e8410600b841016171561439e575081810a610a9b565b6143a883836142bb565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156143da576143da6144c3565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561441a5761441a6144c3565b500290565b600082821015614431576144316144c3565b500390565b600181811c9082168061444a57607f821691505b60208210811415614484577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144bc576144bc6144c3565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c1257600080fdfea2646970667358221220af7b83b6dc559a001f1ce3af3ee2245ae0702cf995ed125d90d38ae7a6f860f664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c80637908542511610186578063a9059cbb116100e3578063ce47e73e11610097578063dd62ed3e11610071578063dd62ed3e146107eb578063f2888dbb14610831578063f2fde38b1461084457600080fd5b8063ce47e73e1461072f578063d3e90fa014610742578063d8143860146107d857600080fd5b8063bc0e610a116100c8578063bc0e610a146106f6578063bf60269214610709578063cc73c66f1461071c57600080fd5b8063a9059cbb146106d0578063adc9772e146106e357600080fd5b806395a2251f1161013a5780639816af581161011f5780639816af5814610697578063a0378aec146106aa578063a457c2d7146106bd57600080fd5b806395a2251f1461067c57806395d89b411461068f57600080fd5b80637d447b221161016b5780637d447b22146105495780637dede9c1146105b75780638da5cb5b1461065e57600080fd5b8063790854251461051b578063790ca4131461052357600080fd5b806335630a3e1161023f5780635e5ba8d7116101f35780636ced6d36116101cd5780636ced6d36146104ca57806370a08231146104dd578063715018a61461051357600080fd5b80635e5ba8d71461046a578063673a2a1f1461047d5780636ce0c4b51461049257600080fd5b8063395093511161022457806339509351146104295780634acaeea61461043c578063568148781461046257600080fd5b806335630a3e14610401578063379607f51461041657600080fd5b8063150b7a021161029657806323b872dd1161027b57806323b872dd146103d7578063313ce567146103ea578063355274ea146103f957600080fd5b8063150b7a021461036757806318160ddd146103cf57600080fd5b806306fdde03116102c757806306fdde031461031c57806308206a7714610331578063095ea7b31461034457600080fd5b80630660f1e8146102e357806306af075014610309575b600080fd5b6102f66102f1366004613d9f565b610857565b6040519081526020015b60405180910390f35b6102f661031736600461416e565b610959565b610324610991565b60405161030091906141f9565b6102f661033f366004613dd7565b610a23565b610357610352366004613f46565b610a8a565b6040519015158152602001610300565b61039e610375366004613e4f565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610300565b6003546102f6565b6103576103e5366004613e0f565b610aa1565b60405160128152602001610300565b6007546102f6565b61041461040f366004614108565b610b8c565b005b6104146104243660046140d8565b610ba2565b610357610437366004613f46565b610c15565b7f00000000000000000000000000000000000000000000000000000000000000006102f6565b6008546102f6565b6104146104783660046140d8565b610c5e565b610485610c6b565b604051610300919061419f565b6104a56104a03660046140d8565b610c7c565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610300565b6104146104d8366004613d9f565b610c89565b6102f66104eb366004613d9f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b610414610cf9565b6009546102f6565b7f00000000000000000000000000000000000000000000000000000000000000006102f6565b61059c610557366004613dd7565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526010602090815260408083209390941682529190915220805460028201546001909201549092565b60408051938452602084019290925290820152606001610300565b6106156105c53660046140d8565b6000908152600a602052604090208054600182015460028301546003840154600485015460059095015473ffffffffffffffffffffffffffffffffffffffff948516969385169592949193911690565b6040805173ffffffffffffffffffffffffffffffffffffffff978816815295871660208701528501939093526060840191909152608083015290911660a082015260c001610300565b60005473ffffffffffffffffffffffffffffffffffffffff166104a5565b61041461068a366004613d9f565b610d86565b610324610df6565b6104856106a5366004613d9f565b610e05565b6104146106b8366004613fc5565b610e10565b6103576106cb366004613f46565b610eef565b6103576106de366004613f46565b610fc7565b6104146106f1366004613f46565b610fd4565b610414610704366004613fc5565b611045565b61041461071736600461406e565b61111f565b61041461072a366004613f71565b611250565b61041461073d366004613fc5565b611268565b6107a3610750366004613d9f565b73ffffffffffffffffffffffffffffffffffffffff166000908152600f60205260409020805460018201546002830154600384015460048501546005860154600690960154949693959294919390929190565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610300565b6104146107e6366004614005565b611342565b6102f66107f9366004613dd7565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205490565b61041461083f366004613d9f565b6114cc565b610414610852366004613d9f565b61153c565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601160205260408120819061088790611669565b90506000427f0000000000000000000000000000000000000000000000000000000000000000116108d8577f00000000000000000000000000000000000000000000000000000000000000006108da565b425b905060005b82518110156109515761093385848381518110610925577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518461167d565b61093d908561426a565b9350806109498161448a565b9150506108df565b505050919050565b60008061097161096a8560646143e2565b8690611716565b61097b90876143e2565b90506109878184611739565b9695505050505050565b6060600480546109a090614436565b80601f01602080910402602001604051908101604052809291908181526020018280546109cc90614436565b8015610a195780601f106109ee57610100808354040283529160200191610a19565b820191906000526020600020905b8154815290600101906020018083116109fc57829003601f168201915b5050505050905090565b600080427f000000000000000000000000000000000000000000000000000000000000000011610a73577f0000000000000000000000000000000000000000000000000000000000000000610a75565b425b9050610a8284848361167d565b949350505050565b6000610a97338484611751565b5060015b92915050565b6000610aae848484611904565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915290205482811015610b74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610b818533858403611751565b506001949350505050565b610b9a868686868686611bb8565b505050505050565b610bac8133611c3d565b610c12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c696420636c61696d206f7065726174696f6e0000000000000000006044820152606401610b6b565b50565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091610a97918590610c5990869061426a565b611751565b610c6781611cac565b5050565b6060610c77600d611669565b905090565b6000610a9b600d83611dc1565b610c933382611dcd565b610c12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964207374616b65206f7065726174696f6e0000000000000000006044820152606401610b6b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6b565b610d846000612059565b565b610d9033826120ce565b610c12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c69642072656465656d206f7065726174696f6e00000000000000006044820152606401610b6b565b6060600580546109a090614436565b6060610a9b826122b5565b60005b81811015610eea57610e7233848484818110610e58577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e6d9190613d9f565b6122e6565b610ed8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420756e7374616b65206f7065726174696f6e000000000000006044820152606401610b6b565b80610ee28161448a565b915050610e13565b505050565b33600090815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205482811015610fb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610b6b565b610fbd3385858403611751565b5060019392505050565b6000610a97338484611904565b610fdf3383836123ef565b610c67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964207374616b65206f7065726174696f6e0000000000000000006044820152606401610b6b565b60005b81811015610eea576110a73384848481811061108d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110a29190613d9f565b6120ce565b61110d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c69642072656465656d206f7065726174696f6e00000000000000006044820152606401610b6b565b806111178161448a565b915050611048565b60005b828110156111df576111673385858481811061108d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6111cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c69642072656465656d206f7065726174696f6e00000000000000006044820152606401610b6b565b806111d78161448a565b915050611122565b506111ea8133611c3d565b610eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c696420636c61696d206f7065726174696f6e0000000000000000006044820152606401610b6b565b61125f87878787878787612a4f565b50505050505050565b60005b81811015610eea576112ca338484848181106112b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906112c59190613d9f565b611dcd565b611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964207374616b65206f7065726174696f6e0000000000000000006044820152606401610b6b565b8061133a8161448a565b91505061126b565b8281146113ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d69736d61746368206172726179206c656e67746800000000000000000000006044820152606401610b6b565b60005b838110156114c55761144d338686848181106113f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906114089190613d9f565b858585818110611441577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356123ef565b6114b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964207374616b65206f7065726174696f6e0000000000000000006044820152606401610b6b565b806114bd8161448a565b9150506113ae565b5050505050565b6114d633826122e6565b610c12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420756e7374616b65206f7065726174696f6e000000000000006044820152606401610b6b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff8116611660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b6b565b610c1281612059565b6060600061167683612df4565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff83811660009081526010602090815260408083209386168352929052908120600281015490548184111561170d5760006116cc838661441f565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600f6020526040902080546001909101549192506117099184919084610959565b9350505b50509392505050565b6000816117256012600a61431c565b61172f90856143e2565b6116769190614282565b60006117476012600a61431c565b61172f83856143e2565b73ffffffffffffffffffffffffffffffffffffffff83166117f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff8216611896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166119a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff8216611a4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205481811015611b00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020526040808220858503905591851681529081208054849290611b4490849061426a565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611baa91815260200190565b60405180910390a350505050565b8315611c2f57611bc9600d82612e50565b611c2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f6e20657869737420706f6f6c0000000000000000000000000000000000006044820152606401610b6b565b610b9a868686868686612e7f565b6000828152600a60205260408120600401548015611ca25773ffffffffffffffffffffffffffffffffffffffff8084166000908152601060209081526040808320888452600a83528184206005015490941683529290522054811015611ca257600080fd5b610a8284846132de565b6000805473ffffffffffffffffffffffffffffffffffffffff163314611d2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6b565b427f00000000000000000000000000000000000000000000000000000000000000001115611db8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4661726d2069732072756e6e696e6700000000000000000000000000000000006044820152606401610b6b565b610a9b8261355a565b600061167683836137d6565b6000427f000000000000000000000000000000000000000000000000000000000000000011611e58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b696e67206973206c6f636b65640000000000000000000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152601060209081526040808320938616835292815282822054600f90915291902060040154811115611f02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420756e7374616b65206f7065726174696f6e000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600f602052604081206004018054839290611f3a90849061441f565b909155505073ffffffffffffffffffffffffffffffffffffffff848116600081815260106020908152604080832094881680845294825280832092909255815185815242918101919091527f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef91015b60405180910390a36040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561202157600080fd5b505af1158015612035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8291906140b8565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526011602052604081206120fd9083612e50565b612163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f6e20657869737400000000000000000000000000000000000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152601060209081526040808320938616835292905220600201547f00000000000000000000000000000000000000000000000000000000000000008110156122ae576000427f000000000000000000000000000000000000000000000000000000000000000011612210577f0000000000000000000000000000000000000000000000000000000000000000612212565b425b9050600061222186868461167d565b905080156122ab5773ffffffffffffffffffffffffffffffffffffffff8681166000818152601060209081526040808320948a16808452948252918290204260029091018190558251868152918201527f3f693fff038bb8a046aa76d9516190ac7444f7d69cf952c4cbdc086fdef2d6fc910160405180910390a36122a68682613827565b600193505b50505b5092915050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601160205260409020606090610a9b90611669565b60007f00000000000000000000000000000000000000000000000000000000000000004211612371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b696e67206973206c6f636b65640000000000000000000000000000006044820152606401610b6b565b61237b83836120ce565b5073ffffffffffffffffffffffffffffffffffffffff8381166000818152601060209081526040808320948716808452948252808320805493905580518381524292810192909252919392917f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef9101611fa9565b60008383837f0000000000000000000000000000000000000000000000000000000000000000421061247d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b696e67206973206c6f636b65640000000000000000000000000000006044820152606401610b6b565b612488600d83612e50565b6124ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f6e2065786973746520706f6f6c00000000000000000000000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600f6020526040902060020154811015612580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6c657373207468616e20746865206d696e696d756d20616d6f756e74000000006044820152606401610b6b565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015230602483015282919084169063dd62ed3e9060440160206040518083038186803b1580156125f057600080fd5b505afa158015612604573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262891906140f0565b1015612690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f7420616c6c6f7765640000000000000000000000000000000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600f60205260408120600401546126c490879061426a565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600f6020526040902060030154909150811115612759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5374616b653a20506f6f6c2043617020657863656564656400000000000000006044820152606401610b6b565b73ffffffffffffffffffffffffffffffffffffffff88166000908152601160205260409020869061278a9089612e50565b156127d45773ffffffffffffffffffffffffffffffffffffffff808a166000908152601060209081526040808320938c16835292905220546127cd90889061426a565b9050612805565b73ffffffffffffffffffffffffffffffffffffffff8916600090815260116020526040902061280390896138c2565b505b81600f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555060405180606001604052808281526020014281526020017f0000000000000000000000000000000000000000000000000000000000000000815250601060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f63602d0ecc7b3a0ef7ff1a116e23056662d64280355ba8031b6d0d767c4b4458894260405161298c929190918252602082015260400190565b60405180910390a36040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152306024830152604482018990528916906323b872dd90606401602060405180830381600087803b158015612a0a57600080fd5b505af1158015612a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4291906140b8565b9998505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612ad0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6b565b612ada8282611716565b600c54612ae7919061426a565b600c819055606490612b0290670de0b6b3a764000090614282565b1115612b6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f65786365656420636170000000000000000000000000000000000000000000006044820152606401610b6b565b8515801590612b7857508415155b8015612b8357508315155b8015612b8e57508215155b8015612b9957508115155b8015612ba457508015155b8015612bc5575073ffffffffffffffffffffffffffffffffffffffff871615155b612c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5a65726f2076616c756573206e6f7420616c6c6f7765640000000000000000006044820152606401610b6b565b612c36600d88612e50565b15612c9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4475706c6963617465642076616c7565206973206e6f7420616c6c6f776564006044820152606401610b6b565b612ca8600d886138c2565b506040518060e001604052808781526020018681526020018581526020018481526020016000815260200183815260200182815250600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c082015181600601559050507f7f8e778ea5a2b6d01c30940e77a7bc8973710ae3df7a9621a0eb875dc0ea6a2d87878787878787604051612de3979695949392919073ffffffffffffffffffffffffffffffffffffffff979097168752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405180910390a150505050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612e4457602002820191906000526020600020905b815481526020019060010190808311612e30575b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001830160205260408120541515611676565b60005473ffffffffffffffffffffffffffffffffffffffff163314612f00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6b565b8415801590612f24575073ffffffffffffffffffffffffffffffffffffffff831615155b8015612f45575073ffffffffffffffffffffffffffffffffffffffff821615155b612fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5a65726f2076616c756573206e6f7420616c6c6f7765640000000000000000006044820152606401610b6b565b6040517f081812fc00000000000000000000000000000000000000000000000000000000815260048101879052309073ffffffffffffffffffffffffffffffffffffffff85169063081812fc9060240160206040518083038186803b15801561301357600080fd5b505afa158015613027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304b9190613dbb565b73ffffffffffffffffffffffffffffffffffffffff16148061310d57506040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015230602483015284169063e985e9c59060440160206040518083038186803b1580156130d557600080fd5b505afa1580156130e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310d91906140b8565b613173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420617070726f76656400000000000000000000000000000000000000006044820152606401610b6b565b6040805160c08101825273ffffffffffffffffffffffffffffffffffffffff808616825284811660208084019182528385018b8152606085018b8152608086018b815288861660a088019081526009546000908152600a909552978420965187549087167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161788559451600188018054918816918716919091179055915160028701555160038601555160048501559351600590930180549390921692169190911790556007805487929061324c90849061426a565b9091555050600980549060006132618361448a565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff83811682526020820189905291810187905260608101869052426080820152818516918416907f700053cd107377aa59290948ce358a84e039c1bdad2494b74d22dd63d11787e39060a00160405180910390a361125f838784306138e4565b6000828152600a60205260408120600301548061331d8473ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b1015613385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e73756666696369656e742066756e640000000000000000000000000000006044820152606401610b6b565b61338f83826139f9565b6000848152600a602052604090819020805460029091015491517f6352211e0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff909116919030908390636352211e9060240160206040518083038186803b15801561341257600080fd5b505afa158015613426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344a9190613dbb565b73ffffffffffffffffffffffffffffffffffffffff16146134c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f556e417574686f72697a656400000000000000000000000000000000000000006044820152606401610b6b565b8173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f17db246e2b79d27e01c800967d89cbee46000807213e933b6e4c4fddac899a78888442604051613539939291909283526020830191909152604082015260600190565b60405180910390a361354d828230886138e4565b5060019695505050505050565b6000818152600a602052604081206003015461357560035490565b1015613603576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f43616e206e6f742072656c656173652c2075736572732063616e2073656c6c2060448201527f69740000000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b6000828152600a6020526040908190208054600182015460029092015492517f6352211e0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff91821693919092169130908490636352211e9060240160206040518083038186803b15801561368f57600080fd5b505afa1580156136a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c79190613dbb565b73ffffffffffffffffffffffffffffffffffffffff1614613744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f556e417574686f72697a656400000000000000000000000000000000000000006044820152606401610b6b565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc5e594fd91506aa39ba7b825e73f11e6db93567d501772ff7af6981f006fd3318784426040516137b6939291909283526020830191909152604082015260600190565b60405180910390a36137ca838230856138e4565b50600195945050505050565b6000826000018281548110613814577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60075481600854613838919061426a565b11156138a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4d696e743a2063617020657863656564656400000000000000000000000000006044820152606401610b6b565b80600860008282546138b2919061426a565b90915550610c6790508282613be6565b60006116768373ffffffffffffffffffffffffffffffffffffffff8416613d06565b600060026006541415613953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b6b565b60026006556040517f42842e0e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528381166024830152604482018690528616906342842e0e90606401600060405180830381600087803b1580156139d057600080fd5b505af11580156139e4573d6000803e3d6000fd5b50505050600190506001600655949350505050565b73ffffffffffffffffffffffffffffffffffffffff8216613a9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090205481811015613b52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610b6b565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260408120838303905560038054849290613b8e90849061441f565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8216613c63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610b6b565b8060036000828254613c75919061426a565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290613caf90849061426a565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000818152600183016020526040812054613d4d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a9b565b506000610a9b565b60008083601f840112613d66578081fd5b50813567ffffffffffffffff811115613d7d578182fd5b6020830191508360208260051b8501011115613d9857600080fd5b9250929050565b600060208284031215613db0578081fd5b813561167681614521565b600060208284031215613dcc578081fd5b815161167681614521565b60008060408385031215613de9578081fd5b8235613df481614521565b91506020830135613e0481614521565b809150509250929050565b600080600060608486031215613e23578081fd5b8335613e2e81614521565b92506020840135613e3e81614521565b929592945050506040919091013590565b60008060008060808587031215613e64578081fd5b8435613e6f81614521565b93506020850135613e7f81614521565b925060408501359150606085013567ffffffffffffffff80821115613ea2578283fd5b818701915087601f830112613eb5578283fd5b813581811115613ec757613ec76144f2565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613f0d57613f0d6144f2565b816040528281528a6020848701011115613f25578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215613f58578182fd5b8235613f6381614521565b946020939093013593505050565b600080600080600080600060e0888a031215613f8b578283fd5b8735613f9681614521565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b60008060208385031215613fd7578182fd5b823567ffffffffffffffff811115613fed578283fd5b613ff985828601613d55565b90969095509350505050565b6000806000806040858703121561401a578384fd5b843567ffffffffffffffff80821115614031578586fd5b61403d88838901613d55565b90965094506020870135915080821115614055578384fd5b5061406287828801613d55565b95989497509550505050565b600080600060408486031215614082578283fd5b833567ffffffffffffffff811115614098578384fd5b6140a486828701613d55565b909790965060209590950135949350505050565b6000602082840312156140c9578081fd5b81518015158114611676578182fd5b6000602082840312156140e9578081fd5b5035919050565b600060208284031215614101578081fd5b5051919050565b60008060008060008060c08789031215614120578384fd5b863595506020870135945060408701359350606087013561414081614521565b9250608087013561415081614521565b915060a087013561416081614521565b809150509295509295509295565b60008060008060808587031215614183578182fd5b5050823594602084013594506040840135936060013592509050565b6020808252825182820181905260009190848201906040850190845b818110156141ed57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016141bb565b50909695505050505050565b6000602080835283518082850152825b8181101561422557858101830151858201604001528201614209565b818111156142365783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000821982111561427d5761427d6144c3565b500190565b6000826142b6577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b600181815b8085111561431457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156142fa576142fa6144c3565b8085161561430757918102915b93841c93908002906142c0565b509250929050565b6000611676838360008261433257506001610a9b565b8161433f57506000610a9b565b8160018114614355576002811461435f5761437b565b6001915050610a9b565b60ff841115614370576143706144c3565b50506001821b610a9b565b5060208310610133831016604e8410600b841016171561439e575081810a610a9b565b6143a883836142bb565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156143da576143da6144c3565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561441a5761441a6144c3565b500290565b600082821015614431576144316144c3565b500390565b600181811c9082168061444a57607f821691505b60208210811415614484577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144bc576144bc6144c3565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c1257600080fdfea2646970667358221220af7b83b6dc559a001f1ce3af3ee2245ae0702cf995ed125d90d38ae7a6f860f664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "only owner can call it",
        "params": {
          "_minimumStake": "minimum amount user should stake in order to participatin in this pool",
          "_shareAPR": "perenage numerator of the pool APR generated",
          "_shareAPRBase": "perenage denominator of the pool APR generated",
          "_token": "erc20 token address",
          "_totalShare": "perenage numerator of pool share of the farm overall points",
          "_totalShareBase": "perenage denominator of pool share of the farm overall points",
          "cap_": "the maxmum amount of token to be staked in this pool"
        }
      },
      "addTokenReward(uint256,uint256,uint256,address,address,address)": {
        "details": "only owner can call itnft point increase the RSFTI cap",
        "params": {
          "_minimumStakeRequired": "optional, for projects the would enforce user to stake their token in order to calim their rewards",
          "_nftAddress": "nft contract address",
          "_priceInPoint": "how many point required to calim it",
          "_tokenId": "nft token id",
          "_tokenLinked": "optinal , pool token address, only if `_minimumStakeRequired` is used to check if the staker is participating in the pool",
          "owner_": "the owner of this nft , this is used as well to return the nft back if no one calim it with no points left in the farm"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "claim(uint256)": {
        "params": {
          "key": "nft id"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getUserPools(address)": {
        "params": {
          "user": "user address"
        },
        "returns": {
          "currentUserPools": "user's pool addresses"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(address)": {
        "params": {
          "_token": "pool token address"
        }
      },
      "redeemAndClaim(address[],uint256)": {
        "params": {
          "_tokens": "array of pool tokens address",
          "key": "nft id"
        }
      },
      "redeemBatch(address[])": {
        "params": {
          "_tokens": "array of pool tokens address"
        }
      },
      "releaseNFT(uint256)": {
        "details": "only  owner can call itcalled only after the `_timeToRelease`"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(address,uint256)": {
        "details": "ony before launch time",
        "params": {
          "_amount": "user stakes to be added to this pool",
          "_token": "pool token address"
        }
      },
      "stakeBatch(address[],uint256[])": {
        "details": "ony before launch time,both function arguments length must be identical",
        "params": {
          "_amounts": "array of values to be staked for each pool",
          "_tokens": "array of pool tokens address"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unStakeEarly(address)": {
        "params": {
          "_token": "pool token address"
        }
      },
      "unStakeEarlyBatch(address[])": {
        "details": "only before launchtimeonly staker can call it",
        "params": {
          "_tokens": "array of pool tokens address"
        }
      },
      "unstake(address)": {
        "params": {
          "_token": "pool token address"
        }
      },
      "unstakeBatch(address[])": {
        "params": {
          "_tokens": "array of pool tokens address"
        }
      },
      "userPoolDetails(address,address)": {
        "returns": {
          "amount": "user stakes in this pool",
          "lastRewardBlock": "last redeeming time",
          "stakeTime": " time of staking"
        }
      },
      "userPoolReward(address,address)": {
        "params": {
          "_token": "pool token address",
          "_user": "user address"
        },
        "returns": {
          "_totalRewards": "number of rewards"
        }
      },
      "userRewards(address)": {
        "params": {
          "user": "user address"
        },
        "returns": {
          "_totalRewards": "number of rewards"
        }
      }
    },
    "title": "Startfi farm contract where users stake their tokens and get NFT as rewards",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPool(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "create new pool"
      },
      "addTokenReward(uint256,uint256,uint256,address,address,address)": {
        "notice": "add the nft rewards that users will claim"
      },
      "releaseNFT(uint256)": {
        "notice": "to protect nfts from being locked in the contract , owner can call it after the time to release and return it back to the original owner as long as minted point is less than the reward `_priceInPoint`"
      },
      "stake(address,uint256)": {
        "notice": "let user to stake tokens in a certain pool"
      },
      "stakeBatch(address[],uint256[])": {
        "notice": "let user to stake in maltible pools in a single transaction"
      },
      "unStakeEarlyBatch(address[])": {
        "notice": "before the farm starts, Let user unstake token from many pools at once"
      },
      "userPoolReward(address,address)": {
        "notice": "calculate user rewards at the call time ( between launchtime to deadline) in a certain pool"
      },
      "userRewards(address)": {
        "notice": "calculate user rewards at the call time ( between launchtime to deadline) in all user pools"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 591,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 835,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 841,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 843,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 845,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 847,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4901,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_cap",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4903,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_mintedPoints",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4905,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_tokenCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4923,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(tokenDetails)4918_storage)"
      },
      {
        "astId": 4441,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_RstfiMaxSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4443,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "totalShares",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4461,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_poolsSet",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(AddressSet)4131_storage"
      },
      {
        "astId": 4466,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_pools",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(poolDetails)4458_storage)"
      },
      {
        "astId": 5799,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "userPools",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(userPool)5792_storage))"
      },
      {
        "astId": 5804,
        "contract": "contracts/StartfiFarm.sol:StartfiFarm",
        "label": "_userToPools",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(AddressSet)4131_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(userPool)5792_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserPools.userPool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(userPool)5792_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AddressSet)4131_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4131_storage"
      },
      "t_mapping(t_address,t_struct(poolDetails)4458_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FarmPools.poolDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(poolDetails)4458_storage"
      },
      "t_mapping(t_address,t_struct(userPool)5792_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserPools.userPool)",
        "numberOfBytes": "32",
        "value": "t_struct(userPool)5792_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(tokenDetails)4918_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FarmTokens.tokenDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(tokenDetails)4918_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4131_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4130,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3830_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3830_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3825,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3829,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(poolDetails)4458_storage": {
        "encoding": "inplace",
        "label": "struct FarmPools.poolDetails",
        "members": [
          {
            "astId": 4445,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "shareAPR",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4447,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "shareAPRBase",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4449,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "minimumStake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4451,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "cap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4453,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "totalSupply",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4455,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "totalShare",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4457,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "totalShareBase",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(tokenDetails)4918_storage": {
        "encoding": "inplace",
        "label": "struct FarmTokens.tokenDetails",
        "members": [
          {
            "astId": 4907,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "nftAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4909,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4911,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4913,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "priceInPoint",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4915,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "minimumStakeRequired",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4917,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "tokenLinked",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(userPool)5792_storage": {
        "encoding": "inplace",
        "label": "struct UserPools.userPool",
        "members": [
          {
            "astId": 5787,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5789,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "stakeTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5791,
            "contract": "contracts/StartfiFarm.sol:StartfiFarm",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}